-- streams_tasks_setup.sql - Snowflake setup for Streams & Tasks CDC pipeline
-- Variables: {{DB}}, {{SCHEMA}}, {{WAREHOUSE}}, {{ROLE}}

USE ROLE {{ROLE}};
USE WAREHOUSE {{WAREHOUSE}};

-- Ensure we're using the correct database and schema
USE DATABASE {{DB}};
USE SCHEMA {{SCHEMA}};

-- Create source table for orders with change tracking
CREATE OR REPLACE TABLE ORDERS (
    ORDER_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    PRODUCT_ID NUMBER NOT NULL,
    QUANTITY NUMBER NOT NULL,
    PRICE DECIMAL(10,2) NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'PENDING',
    ORDER_DATE DATE NOT NULL,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- Create target summary table for aggregated metrics
CREATE OR REPLACE TABLE ORDER_SUMMARY (
    CUSTOMER_ID NUMBER PRIMARY KEY,
    TOTAL_ORDERS NUMBER DEFAULT 0,
    TOTAL_AMOUNT DECIMAL(15,2) DEFAULT 0.00,
    LAST_ORDER_DATE DATE,
    AVG_ORDER_VALUE DECIMAL(10,2) DEFAULT 0.00,
    FIRST_ORDER_DATE DATE,
    LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
);

-- Create audit table to track stream processing
CREATE OR REPLACE TABLE STREAM_PROCESSING_LOG (
    LOG_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    PROCESS_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    RECORDS_PROCESSED NUMBER,
    OPERATION_TYPE VARCHAR(20),
    STATUS VARCHAR(20),
    ERROR_MESSAGE VARCHAR(1000)
);

-- Insert some initial test data
INSERT INTO ORDERS (CUSTOMER_ID, PRODUCT_ID, QUANTITY, PRICE, STATUS, ORDER_DATE, UPDATED_AT)
VALUES 
(101, 1, 2, 25.50, 'COMPLETED', '2024-01-15', CURRENT_TIMESTAMP()),
(101, 2, 1, 15.00, 'COMPLETED', '2024-01-16', CURRENT_TIMESTAMP()),
(102, 1, 3, 76.50, 'PENDING', '2024-01-17', CURRENT_TIMESTAMP()),
(103, 3, 1, 45.00, 'COMPLETED', '2024-01-18', CURRENT_TIMESTAMP()),
(102, 2, 2, 30.00, 'SHIPPED', '2024-01-19', CURRENT_TIMESTAMP());

-- Initialize ORDER_SUMMARY with existing data
INSERT INTO ORDER_SUMMARY (CUSTOMER_ID, TOTAL_ORDERS, TOTAL_AMOUNT, LAST_ORDER_DATE, AVG_ORDER_VALUE, FIRST_ORDER_DATE)
SELECT 
    CUSTOMER_ID,
    COUNT(*) as TOTAL_ORDERS,
    SUM(QUANTITY * PRICE) as TOTAL_AMOUNT,
    MAX(ORDER_DATE) as LAST_ORDER_DATE,
    AVG(QUANTITY * PRICE) as AVG_ORDER_VALUE,
    MIN(ORDER_DATE) as FIRST_ORDER_DATE
FROM ORDERS
GROUP BY CUSTOMER_ID;

-- Verify initial setup
SELECT 'Initial setup complete - ready for streams and tasks configuration' AS status;
SELECT 'Orders table:' AS info, COUNT(*) AS record_count FROM ORDERS;
SELECT 'Order summary table:' AS info, COUNT(*) AS record_count FROM ORDER_SUMMARY;

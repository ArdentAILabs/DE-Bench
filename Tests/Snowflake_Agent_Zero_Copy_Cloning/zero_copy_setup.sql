-- zero_copy_setup.sql - Snowflake setup for Zero-Copy Cloning demonstration
-- Variables: {{DB}}, {{SCHEMA}}, {{WAREHOUSE}}, {{ROLE}}

USE ROLE {{ROLE}};
USE WAREHOUSE {{WAREHOUSE}};

-- Ensure we're using the correct database and schema
USE DATABASE {{DB}};
USE SCHEMA {{SCHEMA}};

-- Create production tables with sample data
CREATE OR REPLACE TABLE CUSTOMERS (
    CUSTOMER_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    PHONE VARCHAR(15),
    ADDRESS VARCHAR(200),
    CITY VARCHAR(50),
    STATE VARCHAR(2),
    ZIP_CODE VARCHAR(10),
    SIGNUP_DATE DATE DEFAULT CURRENT_DATE(),
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREDIT_LIMIT DECIMAL(10,2) DEFAULT 1000.00
);

CREATE OR REPLACE TABLE PRODUCTS (
    PRODUCT_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100) NOT NULL,
    CATEGORY VARCHAR(50) NOT NULL,
    PRICE DECIMAL(10,2) NOT NULL,
    COST DECIMAL(10,2) NOT NULL,
    DESCRIPTION VARCHAR(500),
    SUPPLIER VARCHAR(100),
    IN_STOCK BOOLEAN DEFAULT TRUE,
    CREATED_DATE DATE DEFAULT CURRENT_DATE()
);

CREATE OR REPLACE TABLE TRANSACTIONS (
    TRANSACTION_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    CUSTOMER_ID NUMBER NOT NULL,
    PRODUCT_ID NUMBER NOT NULL,
    QUANTITY NUMBER NOT NULL,
    UNIT_PRICE DECIMAL(10,2) NOT NULL,
    TOTAL_AMOUNT DECIMAL(10,2) NOT NULL,
    TRANSACTION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    PAYMENT_METHOD VARCHAR(20) DEFAULT 'CREDIT_CARD',
    STATUS VARCHAR(20) DEFAULT 'COMPLETED',
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
);

-- Create clone metadata tracking table
CREATE OR REPLACE TABLE CLONE_METADATA (
    CLONE_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    CLONE_NAME VARCHAR(100) NOT NULL,
    SOURCE_DATABASE VARCHAR(100) NOT NULL,
    CLONE_TYPE VARCHAR(20) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    CREATED_BY VARCHAR(100) DEFAULT USER,
    PURPOSE VARCHAR(200),
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    LAST_REFRESHED TIMESTAMP,
    STORAGE_USAGE_BYTES NUMBER DEFAULT 0
);

-- Insert sample customer data (scaled for demonstration)
INSERT INTO CUSTOMERS (FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP_CODE, SIGNUP_DATE, CREDIT_LIMIT)
SELECT 
    'Customer' || LPAD(seq4(), 3, '0') as FIRST_NAME,
    'LastName' || LPAD(seq4(), 3, '0') as LAST_NAME,
    'customer' || LPAD(seq4(), 3, '0') || '@company.com' as EMAIL,
    '555-' || LPAD(UNIFORM(1, 999, random()), 3, '0') || '-' || LPAD(UNIFORM(1, 9999, random()), 4, '0') as PHONE,
    UNIFORM(1, 9999, random()) || ' Main Street' as ADDRESS,
    (ARRAY_CONSTRUCT('New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix', 'Philadelphia', 'San Antonio', 'San Diego', 'Dallas', 'San Jose'))[UNIFORM(1, 10, random())] as CITY,
    (ARRAY_CONSTRUCT('NY', 'CA', 'IL', 'TX', 'AZ', 'PA', 'TX', 'CA', 'TX', 'CA'))[UNIFORM(1, 10, random())] as STATE,
    LPAD(UNIFORM(10000, 99999, random()), 5, '0') as ZIP_CODE,
    DATEADD('day', -UNIFORM(1, 365, random()), CURRENT_DATE()) as SIGNUP_DATE,
    UNIFORM(500, 5000, random()) as CREDIT_LIMIT
FROM TABLE(GENERATOR(ROWCOUNT=>1000));

-- Insert sample product data
INSERT INTO PRODUCTS (PRODUCT_NAME, CATEGORY, PRICE, COST, DESCRIPTION, SUPPLIER)
SELECT 
    'Product ' || LPAD(seq4(), 3, '0') as PRODUCT_NAME,
    (ARRAY_CONSTRUCT('Electronics', 'Clothing', 'Books', 'Home & Garden', 'Sports', 'Automotive', 'Health', 'Beauty', 'Toys', 'Food'))[UNIFORM(1, 10, random())] as CATEGORY,
    ROUND(UNIFORM(10, 500, random()), 2) as PRICE,
    ROUND(UNIFORM(5, 250, random()), 2) as COST,
    'High quality product with excellent features and reliable performance' as DESCRIPTION,
    'Supplier ' || LPAD(UNIFORM(1, 50, random()), 2, '0') as SUPPLIER
FROM TABLE(GENERATOR(ROWCOUNT=>100));

-- Insert sample transaction data
INSERT INTO TRANSACTIONS (CUSTOMER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE, TOTAL_AMOUNT, TRANSACTION_DATE, PAYMENT_METHOD)
SELECT 
    UNIFORM(1, 1000, random()) as CUSTOMER_ID,
    UNIFORM(1, 100, random()) as PRODUCT_ID,
    UNIFORM(1, 10, random()) as QUANTITY,
    p.PRICE as UNIT_PRICE,
    p.PRICE * UNIFORM(1, 10, random()) as TOTAL_AMOUNT,
    DATEADD('hour', -UNIFORM(1, 8760, random()), CURRENT_TIMESTAMP()) as TRANSACTION_DATE,
    (ARRAY_CONSTRUCT('CREDIT_CARD', 'DEBIT_CARD', 'PAYPAL', 'CASH', 'CHECK'))[UNIFORM(1, 5, random())] as PAYMENT_METHOD
FROM TABLE(GENERATOR(ROWCOUNT=>5000)) t
CROSS JOIN (SELECT PRICE FROM PRODUCTS ORDER BY RANDOM() LIMIT 1) p;

-- Create a summary view for clone comparison
CREATE OR REPLACE VIEW BUSINESS_SUMMARY AS
SELECT 
    'PRODUCTION' as ENVIRONMENT,
    (SELECT COUNT(*) FROM CUSTOMERS) as TOTAL_CUSTOMERS,
    (SELECT COUNT(*) FROM PRODUCTS) as TOTAL_PRODUCTS,
    (SELECT COUNT(*) FROM TRANSACTIONS) as TOTAL_TRANSACTIONS,
    (SELECT SUM(TOTAL_AMOUNT) FROM TRANSACTIONS) as TOTAL_REVENUE,
    (SELECT AVG(TOTAL_AMOUNT) FROM TRANSACTIONS) as AVG_TRANSACTION_VALUE,
    CURRENT_TIMESTAMP() as SNAPSHOT_TIME;

-- Verify production data setup
SELECT 'Production database setup complete' as STATUS;
SELECT 'Customers:' as TABLE_INFO, COUNT(*) as RECORD_COUNT FROM CUSTOMERS;
SELECT 'Products:' as TABLE_INFO, COUNT(*) as RECORD_COUNT FROM PRODUCTS;
SELECT 'Transactions:' as TABLE_INFO, COUNT(*) as RECORD_COUNT FROM TRANSACTIONS;

-- Show initial business summary
SELECT * FROM BUSINESS_SUMMARY;

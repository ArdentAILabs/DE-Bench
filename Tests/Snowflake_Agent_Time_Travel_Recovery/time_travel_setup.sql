-- time_travel_setup.sql - Snowflake setup for Time Travel Recovery demonstration
-- Variables: {{DB}}, {{SCHEMA}}, {{WAREHOUSE}}, {{ROLE}}

USE ROLE {{ROLE}};
USE WAREHOUSE {{WAREHOUSE}};

-- Ensure we're using the correct database and schema
USE DATABASE {{DB}};
USE SCHEMA {{SCHEMA}};

-- Create customers table with time travel retention
CREATE OR REPLACE TABLE CUSTOMERS (
    CUSTOMER_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    CUSTOMER_CODE VARCHAR(20) UNIQUE NOT NULL,
    FIRST_NAME VARCHAR(50) NOT NULL,
    LAST_NAME VARCHAR(50) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    PHONE VARCHAR(15),
    ADDRESS VARCHAR(200),
    CITY VARCHAR(50),
    STATE VARCHAR(2),
    ZIP_CODE VARCHAR(10),
    CREDIT_LIMIT DECIMAL(10,2) DEFAULT 1000.00,
    ACCOUNT_BALANCE DECIMAL(10,2) DEFAULT 0.00,
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP()
) DATA_RETENTION_TIME_IN_DAYS = 7;

-- Create orders table with financial data
CREATE OR REPLACE TABLE ORDERS (
    ORDER_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    ORDER_NUMBER VARCHAR(50) UNIQUE NOT NULL,
    CUSTOMER_ID NUMBER NOT NULL,
    ORDER_DATE DATE NOT NULL,
    TOTAL_AMOUNT DECIMAL(12,2) NOT NULL,
    TAX_AMOUNT DECIMAL(10,2) NOT NULL,
    SHIPPING_AMOUNT DECIMAL(10,2) DEFAULT 0.00,
    DISCOUNT_AMOUNT DECIMAL(10,2) DEFAULT 0.00,
    STATUS VARCHAR(20) DEFAULT 'PENDING',
    PAYMENT_STATUS VARCHAR(20) DEFAULT 'PENDING',
    SHIPPING_ADDRESS VARCHAR(500),
    NOTES VARCHAR(1000),
    CREATED_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID)
) DATA_RETENTION_TIME_IN_DAYS = 14;

-- Create audit log table for tracking changes
CREATE OR REPLACE TABLE AUDIT_LOG (
    AUDIT_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    TABLE_NAME VARCHAR(100) NOT NULL,
    OPERATION VARCHAR(20) NOT NULL,
    RECORD_ID VARCHAR(100),
    OLD_VALUES VARIANT,
    NEW_VALUES VARIANT,
    CHANGED_BY VARCHAR(100) DEFAULT CURRENT_USER(),
    CHANGE_TIMESTAMP TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    SESSION_ID VARCHAR(200) DEFAULT CURRENT_SESSION(),
    QUERY_ID VARCHAR(2000) DEFAULT CURRENT_STATEMENT()
) DATA_RETENTION_TIME_IN_DAYS = 30;

-- Create recovery metadata table
CREATE OR REPLACE TABLE RECOVERY_OPERATIONS (
    RECOVERY_ID NUMBER AUTOINCREMENT PRIMARY KEY,
    RECOVERY_TYPE VARCHAR(50) NOT NULL,
    TARGET_TABLE VARCHAR(100) NOT NULL,
    RECOVERY_POINT TIMESTAMP NOT NULL,
    RECOVERY_REASON VARCHAR(500) NOT NULL,
    EXECUTED_BY VARCHAR(100) DEFAULT CURRENT_USER(),
    EXECUTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP(),
    STATUS VARCHAR(20) DEFAULT 'IN_PROGRESS',
    RECORDS_AFFECTED NUMBER DEFAULT 0,
    VALIDATION_STATUS VARCHAR(20),
    NOTES VARCHAR(1000)
);

-- Insert sample customer data
INSERT INTO CUSTOMERS (CUSTOMER_CODE, FIRST_NAME, LAST_NAME, EMAIL, PHONE, ADDRESS, CITY, STATE, ZIP_CODE, CREDIT_LIMIT, ACCOUNT_BALANCE)
VALUES 
('CUST001', 'John', 'Smith', 'john.smith@email.com', '555-0101', '123 Main St', 'New York', 'NY', '10001', 5000.00, 1250.75),
('CUST002', 'Jane', 'Doe', 'jane.doe@email.com', '555-0102', '456 Oak Ave', 'Los Angeles', 'CA', '90210', 7500.00, 2100.50),
('CUST003', 'Bob', 'Wilson', 'bob.wilson@email.com', '555-0103', '789 Pine St', 'Chicago', 'IL', '60601', 3000.00, 850.25),
('CUST004', 'Alice', 'Johnson', 'alice.johnson@email.com', '555-0104', '321 Elm St', 'Houston', 'TX', '77001', 4500.00, 1675.00),
('CUST005', 'Charlie', 'Brown', 'charlie.brown@email.com', '555-0105', '654 Maple Dr', 'Phoenix', 'AZ', '85001', 6000.00, 3200.80);

-- Insert sample order data
INSERT INTO ORDERS (ORDER_NUMBER, CUSTOMER_ID, ORDER_DATE, TOTAL_AMOUNT, TAX_AMOUNT, SHIPPING_AMOUNT, STATUS, PAYMENT_STATUS, SHIPPING_ADDRESS)
VALUES 
('ORD-2024-001', 1, '2024-01-15', 125.75, 10.06, 9.99, 'COMPLETED', 'PAID', '123 Main St, New York, NY 10001'),
('ORD-2024-002', 2, '2024-01-16', 89.50, 7.16, 12.50, 'SHIPPED', 'PAID', '456 Oak Ave, Los Angeles, CA 90210'),
('ORD-2024-003', 1, '2024-01-17', 245.00, 19.60, 15.00, 'COMPLETED', 'PAID', '123 Main St, New York, NY 10001'),
('ORD-2024-004', 3, '2024-01-18', 67.25, 5.38, 8.75, 'PENDING', 'AUTHORIZED', '789 Pine St, Chicago, IL 60601'),
('ORD-2024-005', 4, '2024-01-19', 156.80, 12.54, 11.25, 'PROCESSING', 'PAID', '321 Elm St, Houston, TX 77001'),
('ORD-2024-006', 5, '2024-01-20', 324.99, 26.00, 18.50, 'SHIPPED', 'PAID', '654 Maple Dr, Phoenix, AZ 85001'),
('ORD-2024-007', 2, '2024-01-21', 78.45, 6.28, 9.99, 'COMPLETED', 'PAID', '456 Oak Ave, Los Angeles, CA 90210'),
('ORD-2024-008', 3, '2024-01-22', 199.99, 16.00, 13.75, 'PROCESSING', 'PAID', '789 Pine St, Chicago, IL 60601');

-- Create initial audit log entries
INSERT INTO AUDIT_LOG (TABLE_NAME, OPERATION, RECORD_ID, NEW_VALUES)
SELECT 
    'CUSTOMERS' as TABLE_NAME,
    'INSERT' as OPERATION,
    CUSTOMER_ID::VARCHAR as RECORD_ID,
    OBJECT_CONSTRUCT(
        'customer_code', CUSTOMER_CODE,
        'name', FIRST_NAME || ' ' || LAST_NAME,
        'email', EMAIL,
        'credit_limit', CREDIT_LIMIT
    ) as NEW_VALUES
FROM CUSTOMERS;

INSERT INTO AUDIT_LOG (TABLE_NAME, OPERATION, RECORD_ID, NEW_VALUES)
SELECT 
    'ORDERS' as TABLE_NAME,
    'INSERT' as OPERATION,
    ORDER_ID::VARCHAR as RECORD_ID,
    OBJECT_CONSTRUCT(
        'order_number', ORDER_NUMBER,
        'customer_id', CUSTOMER_ID,
        'total_amount', TOTAL_AMOUNT,
        'status', STATUS
    ) as NEW_VALUES
FROM ORDERS;

-- Create a view for critical business metrics (for recovery validation)
CREATE OR REPLACE VIEW BUSINESS_METRICS AS
SELECT 
    COUNT(DISTINCT c.CUSTOMER_ID) as TOTAL_CUSTOMERS,
    COUNT(DISTINCT o.ORDER_ID) as TOTAL_ORDERS,
    SUM(o.TOTAL_AMOUNT) as TOTAL_REVENUE,
    AVG(o.TOTAL_AMOUNT) as AVG_ORDER_VALUE,
    SUM(c.ACCOUNT_BALANCE) as TOTAL_ACCOUNT_BALANCE,
    COUNT(CASE WHEN o.STATUS = 'COMPLETED' THEN 1 END) as COMPLETED_ORDERS,
    COUNT(CASE WHEN c.STATUS = 'ACTIVE' THEN 1 END) as ACTIVE_CUSTOMERS,
    CURRENT_TIMESTAMP() as SNAPSHOT_TIME
FROM CUSTOMERS c
LEFT JOIN ORDERS o ON c.CUSTOMER_ID = o.CUSTOMER_ID;

-- Create a checkpoint for recovery testing
CREATE OR REPLACE TABLE RECOVERY_CHECKPOINTS AS
SELECT 
    'INITIAL_SETUP' as CHECKPOINT_NAME,
    CURRENT_TIMESTAMP() as CHECKPOINT_TIME,
    * 
FROM BUSINESS_METRICS;

-- Verify initial setup
SELECT 'Time Travel setup complete - production data ready' as STATUS;
SELECT 'Customers:' as TABLE_INFO, COUNT(*) as RECORD_COUNT FROM CUSTOMERS;
SELECT 'Orders:' as TABLE_INFO, COUNT(*) as RECORD_COUNT FROM ORDERS;
SELECT 'Audit Log:' as TABLE_INFO, COUNT(*) as RECORD_COUNT FROM AUDIT_LOG;

-- Show business metrics baseline
SELECT * FROM BUSINESS_METRICS;
